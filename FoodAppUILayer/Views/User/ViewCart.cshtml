@model IEnumerable<FoodAppDALLayer.Models.Cart>
@{
    ViewBag.Title = "ViewCart";
}

<style>

    .quantity-column {
        width: 150px;
    }
</style>

<div class="container">
    <h2>Your Shopping Cart</h2>
    <P class="text-center shadow-lg bg-warning text-white rounded">@TempData["Error"]</P>
    @if (Model.Count() > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Food Item</th>
                    <th class="quantity-column text-center">Quantity</th>
                    <th class="text-center">Price</th>
                    <th>Subtotal</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td><img src="data:image;base64,@item.FoodItem.Image" alt="Product Image" style="max-width: 100px; max-height: 100px;" /></td>
                        <td class="align-middle">@item.FoodItem.Name</td>
                        <td class="quantity-column align-middle">
                            <div class="input-group">
                                <span class="input-group-btn">
                                    <button class="btn btn-default font-weight-bold fw-50 text-danger" onclick="updateQuantity(@item.CartId, -1)">-</button>
                                </span>
                                <input type="text" class="form-control text-center font-weight-bold" id="quantity_@item.CartId" value="@item.Quantity" readonly />
                                <span class="input-group-btn">
                                    <button class="btn btn-default font-weight-bold text-success" onclick="updateQuantity(@item.CartId, 1)">+</button>
                                </span>
                            </div>
                        </td>
                        <td class="text-center align-middle align-middle">@item.Price</td>
                        <td class="align-middle subtotal-column" id="subtotal_@item.CartId">@(item.Quantity * item.Price)</td>
                        <td class="align-middle">
                            <form method="post" action="@Url.Action("RemoveCartItem", "User")">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="cartId" value="@item.CartId" />
                                <button type="submit" class="btn btn-danger">Remove</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <p>Total: &#8377;<span id="totalPrice">@Model.Sum(item => item.Quantity * item.Price)</span></p>



        <a href="@Url.Action("PlaceOrder", new { userId = @Session["UserId"] })" class="btn btn-success" text-decoration:none">
            Place Order <i class="bi bi-arrow-right-circle-fill"></i>
        </a>

    }
    else
    {
        <p>Your cart is empty.</p>
    }
</div>

@section Scripts {
    <script>

        function updateQuantity(cartId, change) {
            var quantityInput = $('#quantity_' + cartId);
            var subTotal = $('#subtotal_' + cartId);
            var currentQuantity = parseInt(quantityInput.val());
            var newQuantity = currentQuantity + change;

            if (newQuantity < 1) {
                alert('Minimum quantity is 1. To remove the product, click "Remove".');
                return;
            }
            quantityInput.val(newQuantity);

            $.ajax({
                url: '/User/UpdateCartQuantity',
                type: 'POST',
                data: { cartId: cartId, newQuantity: newQuantity },
                success: function (response) {
                    if (response.success) {
                        $('#subtotal_' + cartId).text(response.subtotal.toFixed(2));

                        var total = calculateTotal();
                        $('#totalPrice').text(total.toFixed(2));

                    } else {
                        alert(response.errorMessage);

                        quantityInput.val(currentQuantity);
                    }
                },
                error: function () {

                    alert('An error occurred while updating the cart.');


                    quantityInput.val(currentQuantity);
                }
            });
        }

        function calculateTotal() {
            var total = 0;
            $('.subtotal-column').each(function () {
                total += parseFloat($(this).text());
            });
            return total;
        }


    </script>
}
