﻿@model FoodAppUILayer.Models.OrderViewModel

@{
    ViewBag.Title = "Place Order";
}

<div class="container">
    <h3>Order Summary</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.OrderDetails != null)
            {
                foreach (var detail in Model.OrderDetails)
                {
                    <tr>
                        <td>@detail.FoodItemName</td>
                        <td>@detail.Quantity</td>
                        <td>@detail.Price</td>
                        <td>@detail.Subtotal</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">No order details available.</td>
                </tr>
            }
        </tbody>
    </table>

    <p>Delivery Charge: &#8377;<span id="deliveryCharge">100</span></p>
    <p>Total: &#8377;<span id="totalPrice">@Model.TotalAmount</span></p>
    <p>SubTotal: &#8377;<span id="subTotalPrice">@Model.TotalAmount</span></p>

    @if (Model.Addresses != null && Model.Addresses.Any())
    {
        <h4 class="ms-3">Saved Addresses</h4>
        <div class="card-deck col-12">
            @foreach (var savedAddress in Model.Addresses)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Address</h5>
                        <p class="card-text">
                            @savedAddress.Street, @savedAddress.City, @savedAddress.State, @savedAddress.PostalCode
                        </p>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="selectedAddressId" value="@savedAddress.Id" @Session["SavedAddid"]="@savedAddress.Id" id="address_@savedAddress.Id">
                            <label class="form-check-label" for="address_@savedAddress.Id">
                                Select Address
                            </label>
                        </div>
                        <button class="btn btn-primary get-lat-lng" data-address="@savedAddress.Street, @savedAddress.City, @savedAddress.State, @savedAddress.PostalCode">Get Latitude and Longitude</button>
                    </div>
                </div>
            }
        </div>
        <button class="btn btn-outline-primary ms-3 mb-2" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
            Add New Address
        </button>
        <div class="collapse" id="collapseExample">
            @Html.Partial("_AddressLayout", new FoodAppUILayer.Models.AddressViewModel())
        </div>
    }
    else
    {
        <div id="newAddressForm">
            @Html.Partial("_AddressLayout", new FoodAppUILayer.Models.AddressViewModel())
        </div>
    }



    <form id="placeOrderForm" class="ms-3" method="post" action="@Url.Action("OrderConfirm", "User")">
        @Html.AntiForgeryToken()
        <input type="hidden" name="subtotal" id="subtotal" value="@Model.TotalAmount" />
        <input type="hidden" name="userId" value="@Model.UserId" />
        <select id="paymentType" name="paymentType" class="form-select form-select-lg mb-3" aria-label=".form-select-lg example">
            <option selected>Select Payment Method</option>
            <option value="COD">COD</option>
        </select>
        <button type="submit" id="payNowButton" class="btn btn-outline-success">Confirm Order</button>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {

            if (navigator.geolocation) {

                var enableLocation = confirm('This website wants to use your location. Allow?');
                if (enableLocation) {

                    navigator.geolocation.getCurrentPosition(function (position) {
                        var userLatitude = position.coords.latitude;
                        var userLongitude = position.coords.longitude;

                        var destinationLatitude = @Html.Raw(Json.Encode(Model.destinationLatitude));
                        var destinationLongitude = @Html.Raw(Json.Encode(Model.destinationLongitude));
                        console.log(destinationLatitude)
                        console.log(destinationLongitude)

                        var distance = calculateDistance(userLatitude, userLongitude, destinationLatitude, destinationLongitude);
                        console.log(distance)
                        var deliveryCharge = calculateDeliveryCharge(distance);

                        $('#deliveryCharge').text(deliveryCharge.toFixed(2));
                        updateSubTotal();
                    }, function (error) {
                        console.log('Error getting user location:', error.message);
                    });
                } else {
                    console.log('User denied permission to access location.');
                }
            } else {
                console.log('Geolocation is not supported by this browser.');
            }
            //
            // Add an event listener to the button with class "get-lat-lng"
            $('.get-lat-lng').click(function () {
                // Retrieve the address from the data attribute
                var address = $(this).data('address');

                // Send a request to Google Maps Geocoding API
                $.ajax({
                    url: 'https://maps.googleapis.com/maps/api/geocode/json',
                    data: {
                        address: address,
                        key: 'AIzaSyBo-XF0M411riwsd7Shmnc-6PryWDKuxcM'
                    },
                    success: function (response) {
                        // Check if the response is successful
                        if (response.status === 'OK') {
                            // Extract latitude and longitude from the response
                            var latitude = response.results[0].geometry.location.lat;
                            var longitude = response.results[0].geometry.location.lng;

                            // Update the UI with latitude and longitude
                            alert('Latitude: ' + latitude + ', Longitude: ' + longitude);
                        } else {
                            alert('Geocoding was not successful for the following reason: ' + response.status);
                        }
                    },
                    error: function () {
                        alert('Error occurred while fetching data from Google Maps Geocoding API.');
                    }
                });
            });
        });

        function updateSubTotal() {
            var subtotal = parseFloat($('#totalPrice').text());
            var deliveryCharge = parseFloat($('#deliveryCharge').text());
            // Add delivery charge to subtotal
            var subTotalWithDeliveryCharge = subtotal + deliveryCharge;

            // Display subtotal with delivery charge
            $('#subTotalPrice').text(subTotalWithDeliveryCharge.toFixed(2));
            $('#subtotal').val(subTotalWithDeliveryCharge.toFixed(2));
        }

        function calculateDistance(userLatitude, userLongitude, destinationLatitude, destinationLongitude) {

            var R = 6371; // Radius of the Earth in kilometers
            var dLat = deg2rad(destinationLatitude - userLatitude);
            var dLon = deg2rad(destinationLongitude - userLongitude);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(deg2rad(userLatitude)) * Math.cos(deg2rad(destinationLatitude)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var distance = R * c;
            return distance;
        }

        // Define the deg2rad function
        function deg2rad(deg) {
            return deg * (Math.PI / 180);
        }

        function calculateDeliveryCharge(distance) {
            if (distance < 30) {
                return 38;
            } else {
                return distance * 1;
            }
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

}